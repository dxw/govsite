/*
 * Foundation Responsive Library
 * http://foundation.zurb.com
 * Copyright 2014, ZURB
 * Free to use under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
*/
(function(a, b, c, d) {
    "use strict";
    var e = function(b) {
        var c = b.length;
        var d = a("head");
        while (c--) {
            if (d.has("." + b[c]).length === 0) {
                d.append('<meta class="' + b[c] + '" />');
            }
        }
    };
    e([ "foundation-mq-small", "foundation-mq-medium", "foundation-mq-large", "foundation-mq-xlarge", "foundation-mq-xxlarge", "foundation-data-attribute-namespace" ]);
    // Enable FastClick if present
    a(function() {
        if (typeof FastClick !== "undefined") {
            // Don't attach to body if undefined
            if (typeof c.body !== "undefined") {
                FastClick.attach(c.body);
            }
        }
    });
    // private Fast Selector wrapper,
    // returns jQuery object. Only use where
    // getElementById is not available.
    var f = function(b, d) {
        if (typeof b === "string") {
            if (d) {
                var e;
                if (d.jquery) {
                    e = d[0];
                    if (!e) return d;
                } else {
                    e = d;
                }
                return a(e.querySelectorAll(b));
            }
            return a(c.querySelectorAll(b));
        }
        return a(b, d);
    };
    // Namespace functions.
    var g = function(a) {
        var b = [];
        if (!a) b.push("data");
        if (this.namespace.length > 0) b.push(this.namespace);
        b.push(this.name);
        return b.join("-");
    };
    var h = function(a) {
        var b = a.split("-"), c = b.length, d = [];
        while (c--) {
            if (c !== 0) {
                d.push(b[c]);
            } else {
                if (this.namespace.length > 0) {
                    d.push(this.namespace, b[c]);
                } else {
                    d.push(b[c]);
                }
            }
        }
        return d.reverse().join("-");
    };
    // Event binding and data-options updating.
    var i = function(b, c) {
        var d = this, e = !f(this).data(this.attr_name(true));
        if (f(this.scope).is("[" + this.attr_name() + "]")) {
            f(this.scope).data(this.attr_name(true) + "-init", a.extend({}, this.settings, c || b, this.data_options(f(this.scope))));
            if (e) {
                this.events(this.scope);
            }
        } else {
            f("[" + this.attr_name() + "]", this.scope).each(function() {
                var e = !f(this).data(d.attr_name(true) + "-init");
                f(this).data(d.attr_name(true) + "-init", a.extend({}, d.settings, c || b, d.data_options(f(this))));
                if (e) {
                    d.events(this);
                }
            });
        }
        // # Patch to fix #5043 to move this *after* the if/else clause in order for Backbone and similar frameworks to have improved control over event binding and data-options updating.
        if (typeof b === "string") {
            return this[b].call(this, c);
        }
    };
    var j = function(a, b) {
        function c() {
            b(a[0]);
        }
        function d() {
            this.one("load", c);
            if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
                var a = this.attr("src"), b = a.match(/\?/) ? "&" : "?";
                b += "random=" + new Date().getTime();
                this.attr("src", a + b);
            }
        }
        if (!a.attr("src")) {
            c();
            return;
        }
        if (a[0].complete || a[0].readyState === 4) {
            c();
        } else {
            d.call(a);
        }
    };
    /*
    https://github.com/paulirish/matchMedia.js
  */
    b.matchMedia = b.matchMedia || function(a) {
        "use strict";
        var b, c = a.documentElement, d = c.firstElementChild || c.firstChild, // fakeBody required for <FF4 when executed in <head>
        e = a.createElement("body"), f = a.createElement("div");
        f.id = "mq-test-1";
        f.style.cssText = "position:absolute;top:-100em";
        e.style.background = "none";
        e.appendChild(f);
        return function(a) {
            f.innerHTML = '&shy;<style media="' + a + '"> #mq-test-1 { width: 42px; }</style>';
            c.insertBefore(e, d);
            b = f.offsetWidth === 42;
            c.removeChild(e);
            return {
                matches: b,
                media: a
            };
        };
    }(c);
    /*
   * jquery.requestAnimationFrame
   * https://github.com/gnarf37/jquery-requestAnimationFrame
   * Requires jQuery 1.8+
   *
   * Copyright (c) 2012 Corey Frang
   * Licensed under the MIT license.
   */
    (function(a) {
        // requestAnimationFrame polyfill adapted from Erik MÃ¶ller
        // fixes from Paul Irish and Tino Zijdel
        // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
        // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
        var c, d = 0, e = [ "webkit", "moz" ], f = b.requestAnimationFrame, g = b.cancelAnimationFrame, h = "undefined" !== typeof jQuery.fx;
        for (;d < e.length && !f; d++) {
            f = b[e[d] + "RequestAnimationFrame"];
            g = g || b[e[d] + "CancelAnimationFrame"] || b[e[d] + "CancelRequestAnimationFrame"];
        }
        function i() {
            if (c) {
                f(i);
                if (h) {
                    jQuery.fx.tick();
                }
            }
        }
        if (f) {
            // use rAF
            b.requestAnimationFrame = f;
            b.cancelAnimationFrame = g;
            if (h) {
                jQuery.fx.timer = function(a) {
                    if (a() && jQuery.timers.push(a) && !c) {
                        c = true;
                        i();
                    }
                };
                jQuery.fx.stop = function() {
                    c = false;
                };
            }
        } else {
            // polyfill
            b.requestAnimationFrame = function(a) {
                var c = new Date().getTime(), e = Math.max(0, 16 - (c - d)), f = b.setTimeout(function() {
                    a(c + e);
                }, e);
                d = c + e;
                return f;
            };
            b.cancelAnimationFrame = function(a) {
                clearTimeout(a);
            };
        }
    })(jQuery);
    function k(a) {
        if (typeof a === "string" || a instanceof String) {
            a = a.replace(/^['\\/"]+|(;\s?})+|['\\/"]+$/g, "");
        }
        return a;
    }
    b.Foundation = {
        name: "Foundation",
        version: "5.4.5",
        media_queries: {
            small: f(".foundation-mq-small").css("font-family").replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ""),
            medium: f(".foundation-mq-medium").css("font-family").replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ""),
            large: f(".foundation-mq-large").css("font-family").replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ""),
            xlarge: f(".foundation-mq-xlarge").css("font-family").replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ""),
            xxlarge: f(".foundation-mq-xxlarge").css("font-family").replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, "")
        },
        stylesheet: a("<style></style>").appendTo("head")[0].sheet,
        global: {
            namespace: d
        },
        init: function(a, c, d, e, g) {
            var h = [ a, d, e, g ], i = [];
            // check RTL
            this.rtl = /rtl/i.test(f("html").attr("dir"));
            // set foundation global scope
            this.scope = a || this.scope;
            this.set_namespace();
            if (c && typeof c === "string" && !/reflow/i.test(c)) {
                if (this.libs.hasOwnProperty(c)) {
                    i.push(this.init_lib(c, h));
                }
            } else {
                for (var j in this.libs) {
                    i.push(this.init_lib(j, c));
                }
            }
            f(b).load(function() {
                f(b).trigger("resize.fndtn.clearing").trigger("resize.fndtn.dropdown").trigger("resize.fndtn.equalizer").trigger("resize.fndtn.interchange").trigger("resize.fndtn.joyride").trigger("resize.fndtn.magellan").trigger("resize.fndtn.topbar").trigger("resize.fndtn.slider");
            });
            return a;
        },
        init_lib: function(b, c) {
            if (this.libs.hasOwnProperty(b)) {
                this.patch(this.libs[b]);
                if (c && c.hasOwnProperty(b)) {
                    if (typeof this.libs[b].settings !== "undefined") {
                        a.extend(true, this.libs[b].settings, c[b]);
                    } else if (typeof this.libs[b].defaults !== "undefined") {
                        a.extend(true, this.libs[b].defaults, c[b]);
                    }
                    return this.libs[b].init.apply(this.libs[b], [ this.scope, c[b] ]);
                }
                c = c instanceof Array ? c : new Array(c);
                // PATCH: added this line
                return this.libs[b].init.apply(this.libs[b], c);
            }
            return function() {};
        },
        patch: function(a) {
            a.scope = this.scope;
            a.namespace = this.global.namespace;
            a.rtl = this.rtl;
            a["data_options"] = this.utils.data_options;
            a["attr_name"] = g;
            a["add_namespace"] = h;
            a["bindings"] = i;
            a["S"] = this.utils.S;
        },
        inherit: function(a, b) {
            var c = b.split(" "), d = c.length;
            while (d--) {
                if (this.utils.hasOwnProperty(c[d])) {
                    a[c[d]] = this.utils[c[d]];
                }
            }
        },
        set_namespace: function() {
            // Description:
            //    Don't bother reading the namespace out of the meta tag
            //    if the namespace has been set globally in javascript
            //
            // Example:
            //    Foundation.global.namespace = 'my-namespace';
            // or make it an empty string:
            //    Foundation.global.namespace = '';
            //
            //
            // If the namespace has not been set (is undefined), try to read it out of the meta element.
            // Otherwise use the globally defined namespace, even if it's empty ('')
            var b = this.global.namespace === d ? a(".foundation-data-attribute-namespace").css("font-family") : this.global.namespace;
            // Finally, if the namsepace is either undefined or false, set it to an empty string.
            // Otherwise use the namespace value.
            this.global.namespace = b === d || /false/i.test(b) ? "" : b;
        },
        libs: {},
        // methods that can be inherited in libraries
        utils: {
            // Description:
            //    Fast Selector wrapper returns jQuery object. Only use where getElementById
            //    is not available.
            //
            // Arguments:
            //    Selector (String): CSS selector describing the element(s) to be
            //    returned as a jQuery object.
            //
            //    Scope (String): CSS selector describing the area to be searched. Default
            //    is document.
            //
            // Returns:
            //    Element (jQuery Object): jQuery object containing elements matching the
            //    selector within the scope.
            S: f,
            // Description:
            //    Executes a function a max of once every n milliseconds
            //
            // Arguments:
            //    Func (Function): Function to be throttled.
            //
            //    Delay (Integer): Function execution threshold in milliseconds.
            //
            // Returns:
            //    Lazy_function (Function): Function with throttling applied.
            throttle: function(a, b) {
                var c = null;
                return function() {
                    var d = this, e = arguments;
                    if (c == null) {
                        c = setTimeout(function() {
                            a.apply(d, e);
                            c = null;
                        }, b);
                    }
                };
            },
            // Description:
            //    Executes a function when it stops being invoked for n seconds
            //    Modified version of _.debounce() http://underscorejs.org
            //
            // Arguments:
            //    Func (Function): Function to be debounced.
            //
            //    Delay (Integer): Function execution threshold in milliseconds.
            //
            //    Immediate (Bool): Whether the function should be called at the beginning
            //    of the delay instead of the end. Default is false.
            //
            // Returns:
            //    Lazy_function (Function): Function with debouncing applied.
            debounce: function(a, b, c) {
                var d, e;
                return function() {
                    var f = this, g = arguments;
                    var h = function() {
                        d = null;
                        if (!c) e = a.apply(f, g);
                    };
                    var i = c && !d;
                    clearTimeout(d);
                    d = setTimeout(h, b);
                    if (i) e = a.apply(f, g);
                    return e;
                };
            },
            // Description:
            //    Parses data-options attribute
            //
            // Arguments:
            //    El (jQuery Object): Element to be parsed.
            //
            // Returns:
            //    Options (Javascript Object): Contents of the element's data-options
            //    attribute.
            data_options: function(b, c) {
                c = c || "options";
                var d = {}, e, f, g, h = function(a) {
                    var b = Foundation.global.namespace;
                    if (b.length > 0) {
                        return a.data(b + "-" + c);
                    }
                    return a.data(c);
                };
                var i = h(b);
                if (typeof i === "object") {
                    return i;
                }
                g = (i || ":").split(";");
                e = g.length;
                function j(a) {
                    return !isNaN(a - 0) && a !== null && a !== "" && a !== false && a !== true;
                }
                function k(b) {
                    if (typeof b === "string") return a.trim(b);
                    return b;
                }
                while (e--) {
                    f = g[e].split(":");
                    f = [ f[0], f.slice(1).join(":") ];
                    if (/true/i.test(f[1])) f[1] = true;
                    if (/false/i.test(f[1])) f[1] = false;
                    if (j(f[1])) {
                        if (f[1].indexOf(".") === -1) {
                            f[1] = parseInt(f[1], 10);
                        } else {
                            f[1] = parseFloat(f[1]);
                        }
                    }
                    if (f.length === 2 && f[0].length > 0) {
                        d[k(f[0])] = k(f[1]);
                    }
                }
                return d;
            },
            // Description:
            //    Adds JS-recognizable media queries
            //
            // Arguments:
            //    Media (String): Key string for the media query to be stored as in
            //    Foundation.media_queries
            //
            //    Class (String): Class name for the generated <meta> tag
            register_media: function(b, c) {
                if (Foundation.media_queries[b] === d) {
                    a("head").append('<meta class="' + c + '"/>');
                    Foundation.media_queries[b] = k(a("." + c).css("font-family"));
                }
            },
            // Description:
            //    Add custom CSS within a JS-defined media query
            //
            // Arguments:
            //    Rule (String): CSS rule to be appended to the document.
            //
            //    Media (String): Optional media query string for the CSS rule to be
            //    nested under.
            add_custom_rule: function(a, b) {
                if (b === d && Foundation.stylesheet) {
                    Foundation.stylesheet.insertRule(a, Foundation.stylesheet.cssRules.length);
                } else {
                    var c = Foundation.media_queries[b];
                    if (c !== d) {
                        Foundation.stylesheet.insertRule("@media " + Foundation.media_queries[b] + "{ " + a + " }");
                    }
                }
            },
            // Description:
            //    Performs a callback function when an image is fully loaded
            //
            // Arguments:
            //    Image (jQuery Object): Image(s) to check if loaded.
            //
            //    Callback (Function): Function to execute when image is fully loaded.
            image_loaded: function(a, b) {
                var c = this, d = a.length;
                if (d === 0) {
                    b(a);
                }
                a.each(function() {
                    j(c.S(this), function() {
                        d -= 1;
                        if (d === 0) {
                            b(a);
                        }
                    });
                });
            },
            // Description:
            //    Returns a random, alphanumeric string
            //
            // Arguments:
            //    Length (Integer): Length of string to be generated. Defaults to random
            //    integer.
            //
            // Returns:
            //    Rand (String): Pseudo-random, alphanumeric string.
            random_str: function() {
                if (!this.fidx) this.fidx = 0;
                this.prefix = this.prefix || [ this.name || "F", (+new Date()).toString(36) ].join("-");
                return this.prefix + (this.fidx++).toString(36);
            }
        }
    };
    a.fn.foundation = function() {
        var a = Array.prototype.slice.call(arguments, 0);
        return this.each(function() {
            Foundation.init.apply(Foundation, [ this ].concat(a));
            return this;
        });
    };
})(jQuery, window, window.document);

(function(a, b, c, d) {
    "use strict";
    Foundation.libs.topbar = {
        name: "topbar",
        version: "5.4.5",
        settings: {
            index: 0,
            sticky_class: "sticky",
            custom_back_text: true,
            back_text: "Back",
            mobile_show_parent_link: true,
            is_hover: true,
            scrolltop: true,
            // jump to top when sticky nav menu toggle is clicked
            sticky_on: "all"
        },
        init: function(b, c, d) {
            Foundation.inherit(this, "add_custom_rule register_media throttle");
            var e = this;
            e.register_media("topbar", "foundation-mq-topbar");
            this.bindings(c, d);
            e.S("[" + this.attr_name() + "]", this.scope).each(function() {
                var b = a(this), c = b.data(e.attr_name(true) + "-init"), d = e.S("section, .top-bar-section", this);
                b.data("index", 0);
                var f = b.parent();
                if (f.hasClass("fixed") || e.is_sticky(b, f, c)) {
                    e.settings.sticky_class = c.sticky_class;
                    e.settings.sticky_topbar = b;
                    b.data("height", f.outerHeight());
                    b.data("stickyoffset", f.offset().top);
                } else {
                    b.data("height", b.outerHeight());
                }
                if (!c.assembled) {
                    e.assemble(b);
                }
                if (c.is_hover) {
                    e.S(".has-dropdown", b).addClass("not-click");
                } else {
                    e.S(".has-dropdown", b).removeClass("not-click");
                }
                // Pad body when sticky (scrolled) or fixed.
                e.add_custom_rule(".f-topbar-fixed { padding-top: " + b.data("height") + "px }");
                if (f.hasClass("fixed")) {
                    e.S("body").addClass("f-topbar-fixed");
                }
            });
        },
        is_sticky: function(a, b, c) {
            var d = b.hasClass(c.sticky_class);
            if (d && c.sticky_on === "all") {
                return true;
            } else if (d && this.small() && c.sticky_on === "small") {
                return matchMedia(Foundation.media_queries.small).matches && !matchMedia(Foundation.media_queries.medium).matches && !matchMedia(Foundation.media_queries.large).matches;
            } else if (d && this.medium() && c.sticky_on === "medium") {
                return matchMedia(Foundation.media_queries.small).matches && matchMedia(Foundation.media_queries.medium).matches && !matchMedia(Foundation.media_queries.large).matches;
            } else if (d && this.large() && c.sticky_on === "large") {
                return matchMedia(Foundation.media_queries.small).matches && matchMedia(Foundation.media_queries.medium).matches && matchMedia(Foundation.media_queries.large).matches;
            }
            return false;
        },
        toggle: function(c) {
            var d = this, e;
            if (c) {
                e = d.S(c).closest("[" + this.attr_name() + "]");
            } else {
                e = d.S("[" + this.attr_name() + "]");
            }
            var f = e.data(this.attr_name(true) + "-init");
            var g = d.S("section, .top-bar-section", e);
            if (d.breakpoint()) {
                if (!d.rtl) {
                    g.css({
                        left: "0%"
                    });
                    a(">.name", g).css({
                        left: "100%"
                    });
                } else {
                    g.css({
                        right: "0%"
                    });
                    a(">.name", g).css({
                        right: "100%"
                    });
                }
                d.S("li.moved", g).removeClass("moved");
                e.data("index", 0);
                e.toggleClass("expanded").css("height", "");
            }
            if (f.scrolltop) {
                if (!e.hasClass("expanded")) {
                    if (e.hasClass("fixed")) {
                        e.parent().addClass("fixed");
                        e.removeClass("fixed");
                        d.S("body").addClass("f-topbar-fixed");
                    }
                } else if (e.parent().hasClass("fixed")) {
                    if (f.scrolltop) {
                        e.parent().removeClass("fixed");
                        e.addClass("fixed");
                        d.S("body").removeClass("f-topbar-fixed");
                        b.scrollTo(0, 0);
                    } else {
                        e.parent().removeClass("expanded");
                    }
                }
            } else {
                if (d.is_sticky(e, e.parent(), f)) {
                    e.parent().addClass("fixed");
                }
                if (e.parent().hasClass("fixed")) {
                    if (!e.hasClass("expanded")) {
                        e.removeClass("fixed");
                        e.parent().removeClass("expanded");
                        d.update_sticky_positioning();
                    } else {
                        e.addClass("fixed");
                        e.parent().addClass("expanded");
                        d.S("body").addClass("f-topbar-fixed");
                    }
                }
            }
        },
        timer: null,
        events: function(c) {
            var d = this, e = this.S;
            e(this.scope).off(".topbar").on("click.fndtn.topbar", "[" + this.attr_name() + "] .toggle-topbar", function(a) {
                a.preventDefault();
                d.toggle(this);
            }).on("click.fndtn.topbar", '.top-bar .top-bar-section li a[href^="#"],[' + this.attr_name() + '] .top-bar-section li a[href^="#"]', function(b) {
                var c = a(this).closest("li");
                if (d.breakpoint() && !c.hasClass("back") && !c.hasClass("has-dropdown")) {
                    d.toggle();
                }
            }).on("click.fndtn.topbar", "[" + this.attr_name() + "] li.has-dropdown", function(b) {
                var c = e(this), f = e(b.target), g = c.closest("[" + d.attr_name() + "]"), h = g.data(d.attr_name(true) + "-init");
                if (f.data("revealId")) {
                    d.toggle();
                    return;
                }
                if (d.breakpoint()) return;
                if (h.is_hover && !Modernizr.touch) return;
                b.stopImmediatePropagation();
                if (c.hasClass("hover")) {
                    c.removeClass("hover").find("li").removeClass("hover");
                    c.parents("li.hover").removeClass("hover");
                } else {
                    c.addClass("hover");
                    a(c).siblings().removeClass("hover");
                    if (f[0].nodeName === "A" && f.parent().hasClass("has-dropdown")) {
                        b.preventDefault();
                    }
                }
            }).on("click.fndtn.topbar", "[" + this.attr_name() + "] .has-dropdown>a", function(a) {
                if (d.breakpoint()) {
                    a.preventDefault();
                    var b = e(this), c = b.closest("[" + d.attr_name() + "]"), f = c.find("section, .top-bar-section"), g = b.next(".dropdown").outerHeight(), h = b.closest("li");
                    c.data("index", c.data("index") + 1);
                    h.addClass("moved");
                    if (!d.rtl) {
                        f.css({
                            left: -(100 * c.data("index")) + "%"
                        });
                        f.find(">.name").css({
                            left: 100 * c.data("index") + "%"
                        });
                    } else {
                        f.css({
                            right: -(100 * c.data("index")) + "%"
                        });
                        f.find(">.name").css({
                            right: 100 * c.data("index") + "%"
                        });
                    }
                    c.css("height", b.siblings("ul").outerHeight(true) + c.data("height"));
                }
            });
            e(b).off(".topbar").on("resize.fndtn.topbar", d.throttle(function() {
                d.resize.call(d);
            }, 50)).trigger("resize").trigger("resize.fndtn.topbar").load(function() {
                // Ensure that the offset is calculated after all of the pages resources have loaded
                e(this).trigger("resize.fndtn.topbar");
            });
            e("body").off(".topbar").on("click.fndtn.topbar", function(a) {
                var b = e(a.target).closest("li").closest("li.hover");
                if (b.length > 0) {
                    return;
                }
                e("[" + d.attr_name() + "] li.hover").removeClass("hover");
            });
            // Go up a level on Click
            e(this.scope).on("click.fndtn.topbar", "[" + this.attr_name() + "] .has-dropdown .back", function(a) {
                a.preventDefault();
                var b = e(this), c = b.closest("[" + d.attr_name() + "]"), f = c.find("section, .top-bar-section"), g = c.data(d.attr_name(true) + "-init"), h = b.closest("li.moved"), i = h.parent();
                c.data("index", c.data("index") - 1);
                if (!d.rtl) {
                    f.css({
                        left: -(100 * c.data("index")) + "%"
                    });
                    f.find(">.name").css({
                        left: 100 * c.data("index") + "%"
                    });
                } else {
                    f.css({
                        right: -(100 * c.data("index")) + "%"
                    });
                    f.find(">.name").css({
                        right: 100 * c.data("index") + "%"
                    });
                }
                if (c.data("index") === 0) {
                    c.css("height", "");
                } else {
                    c.css("height", i.outerHeight(true) + c.data("height"));
                }
                setTimeout(function() {
                    h.removeClass("moved");
                }, 300);
            });
            // Show dropdown menus when their items are focused
            e(this.scope).find(".dropdown a").focus(function() {
                a(this).parents(".has-dropdown").addClass("hover");
            }).blur(function() {
                a(this).parents(".has-dropdown").removeClass("hover");
            });
        },
        resize: function() {
            var a = this;
            a.S("[" + this.attr_name() + "]").each(function() {
                var b = a.S(this), d = b.data(a.attr_name(true) + "-init");
                var e = b.parent("." + a.settings.sticky_class);
                var f;
                if (!a.breakpoint()) {
                    var g = b.hasClass("expanded");
                    b.css("height", "").removeClass("expanded").find("li").removeClass("hover");
                    if (g) {
                        a.toggle(b);
                    }
                }
                if (a.is_sticky(b, e, d)) {
                    if (e.hasClass("fixed")) {
                        // Remove the fixed to allow for correct calculation of the offset.
                        e.removeClass("fixed");
                        f = e.offset().top;
                        if (a.S(c.body).hasClass("f-topbar-fixed")) {
                            f -= b.data("height");
                        }
                        b.data("stickyoffset", f);
                        e.addClass("fixed");
                    } else {
                        f = e.offset().top;
                        b.data("stickyoffset", f);
                    }
                }
            });
        },
        breakpoint: function() {
            return !matchMedia(Foundation.media_queries["topbar"]).matches;
        },
        small: function() {
            return matchMedia(Foundation.media_queries["small"]).matches;
        },
        medium: function() {
            return matchMedia(Foundation.media_queries["medium"]).matches;
        },
        large: function() {
            return matchMedia(Foundation.media_queries["large"]).matches;
        },
        assemble: function(b) {
            var c = this, d = b.data(this.attr_name(true) + "-init"), e = c.S("section, .top-bar-section", b);
            // Pull element out of the DOM for manipulation
            e.detach();
            c.S(".has-dropdown>a", e).each(function() {
                var b = c.S(this), e = b.siblings(".dropdown"), f = b.attr("href"), g;
                if (!e.find(".title.back").length) {
                    if (d.mobile_show_parent_link == true && f) {
                        g = a('<li class="title back js-generated"><h5><a href="javascript:void(0)"></a></h5></li><li class="parent-link show-for-small"><a class="parent-link js-generated" href="' + f + '">' + b.html() + "</a></li>");
                    } else {
                        g = a('<li class="title back js-generated"><h5><a href="javascript:void(0)"></a></h5>');
                    }
                    // Copy link to subnav
                    if (d.custom_back_text == true) {
                        a("h5>a", g).html(d.back_text);
                    } else {
                        a("h5>a", g).html("&laquo; " + b.html());
                    }
                    e.prepend(g);
                }
            });
            // Put element back in the DOM
            e.appendTo(b);
            // check for sticky
            this.sticky();
            this.assembled(b);
        },
        assembled: function(b) {
            b.data(this.attr_name(true), a.extend({}, b.data(this.attr_name(true)), {
                assembled: true
            }));
        },
        height: function(b) {
            var c = 0, d = this;
            a("> li", b).each(function() {
                c += d.S(this).outerHeight(true);
            });
            return c;
        },
        sticky: function() {
            var a = this;
            this.S(b).on("scroll", function() {
                a.update_sticky_positioning();
            });
        },
        update_sticky_positioning: function() {
            var a = "." + this.settings.sticky_class, c = this.S(b), d = this;
            if (d.settings.sticky_topbar && d.is_sticky(this.settings.sticky_topbar, this.settings.sticky_topbar.parent(), this.settings)) {
                var e = this.settings.sticky_topbar.data("stickyoffset");
                if (!d.S(a).hasClass("expanded")) {
                    if (c.scrollTop() > e) {
                        if (!d.S(a).hasClass("fixed")) {
                            d.S(a).addClass("fixed");
                            d.S("body").addClass("f-topbar-fixed");
                        }
                    } else if (c.scrollTop() <= e) {
                        if (d.S(a).hasClass("fixed")) {
                            d.S(a).removeClass("fixed");
                            d.S("body").removeClass("f-topbar-fixed");
                        }
                    }
                }
            }
        },
        off: function() {
            this.S(this.scope).off(".fndtn.topbar");
            this.S(b).off(".fndtn.topbar");
        },
        reflow: function() {}
    };
})(jQuery, window, window.document);

jQuery(function(a) {
    "use strict";
    a(document).foundation({
        topbar: {
            custom_back_text: false,
            mobile_show_parent_link: false
        }
    });
    // Make placeholder appear on IE
    a(function() {
        var b = document.createElement("input");
        if ("placeholder" in b === false) {
            a("[placeholder]").focus(function() {
                var b = a(this);
                if (b.val() == b.attr("placeholder")) {
                    b.val("").removeClass("placeholder");
                    if (b.hasClass("password")) {
                        b.removeClass("password");
                        this.type = "password";
                    }
                }
            }).blur(function() {
                var b = a(this);
                if (b.val() === "" || b.val() == b.attr("placeholder")) {
                    if (this.type == "password") {
                        b.addClass("password");
                        this.type = "text";
                    }
                    b.addClass("placeholder").val(b.attr("placeholder"));
                }
            }).blur().parents("form").submit(function() {
                a(this).find("[placeholder]").each(function() {
                    var b = a(this);
                    if (b.val() == b.attr("placeholder")) {
                        b.val("");
                    }
                });
            });
        }
    });
    // Toggle navigation
    var b = a(".top-bar"), c = a(".nav-toggle");
    c.click(function() {
        c.toggleClass("active");
        b.toggleClass("active");
        return false;
    });
    // Search
    var d = a(".header-search .icon-search"), e = a(".header-search input");
    e.blur(function() {
        d.removeClass("focus");
    });
    e.focus(function() {
        d.addClass("focus");
    });
    var f = a("#top-bar .button-search"), g = a(".header-search");
    f.click(function() {
        g.slideToggle("fast");
        f.toggleClass("opened");
    });
    // Scroll to commnets
    a(".comment-scroll").click(function() {
        a("html, body").animate({
            scrollTop: a("#comment-form").offset().top
        }, 1e3);
    });
});
//# sourceMappingURL=main.min.js.map